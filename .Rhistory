xlab = "", ylab = "Survival",
## xlim(0,100),
label.curves = TRUE,                     # label curves directly
## label.curves = list(keys = "lines"),  # legend instead of direct label
abbrev.label = FALSE,                    # if label used, abbreviate
## fun = function(x) {1 - x},            # Cumulative probability plot
loglog   = FALSE,                        # log(-log Survival) plot
logt     = FALSE,                        # log time
time.inc = 100,                          # time increment
dots     = FALSE,                         # dot grid
n.risk   = TRUE,                         # show number at risk
## srt.n.risk = 0, sep.n.risk = 0.056, adj.n.risk = 1,
## y.n.risk = 0, cex.n.risk = 0.6
)
## List datasets in survival package
data(package = "survival")
??survplot
## Load rms package
install.packages(rms)
library(rms)
## Load rms package
install.packages(rms)
## without specification
#survplot(km.by.sex)
## Load rms package
library(rms)
detach("package:rms", unload=TRUE)
library("rms", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
#function that calculates the number of people still alive
numStillAlive <- function(subset1) {
totalStartAlive <- sum(subset1)
for (i in row(subset1)){
sumDead <- sum(subset1[1:i,1])
stillAlive <- totalStartAlive - sumDead
listStillAlive <- c(listStillAlive,stillAlive)
}
return(listStillAlive)
}
proportionAlive <- function(dataframe) {
for (i in col(dataframe)) {
a <- dataframe[i]/dataframe[1]
list <- c(list,a)
}
return(list)
}
fpre1840alive <- as.data.frame(numStillAlive(fpre1840))
fpre1840 <- subset(demographyData, select = "Pre-1840 Female")
setwd("~/Biol208Repo")
fpre1840 <- subset(demographyData, select = "Pre-1840 Female")
install.packages("readxl")
library(readxl)
library(ggplot2)
library(cowplot)
demographyData <- read_excel("BIO208_Demog_Calcs_Master.xlsx")
View(demographyData)
fpre1840 <- subset(demographyData, select = "Pre-1840 Female")
mpre1840 <- subset(demographyData, select = "Pre-1840 Male")
#function that calculates the number of people still alive
numStillAlive <- function(subset1) {
totalStartAlive <- sum(subset1)
for (i in row(subset1)){
sumDead <- sum(subset1[1:i,1])
stillAlive <- totalStartAlive - sumDead
listStillAlive <- c(listStillAlive,stillAlive)
}
return(listStillAlive)
}
proportionAlive <- function(dataframe) {
for (i in col(dataframe)) {
a <- dataframe[i]/dataframe[1]
list <- c(list,a)
}
return(list)
}
fpre1840alive <- as.data.frame(numStillAlive(fpre1840))
fpre1840prop <- proportionAlive(fpre1840alive)
fpre1840alive <- as.data.frame(numStillAlive(fpre1840))
#function that calculates the number of people still alive
numStillAlive <- function(subset1) {
totalStartAlive <- sum(subset1)
for (i in row(subset1)){
sumDead <- sum(subset1[1:i,1])
stillAlive <- totalStartAlive - sumDead
listStillAlive <- c(listStillAlive,stillAlive)
}
return(listStillAlive)
}
proportionAlive <- function(dataframe) {
for (i in col(dataframe)) {
a <- dataframe[i]/dataframe[1]
list <- c(list,a)
}
return(list)
}
fpre1840alive <- as.data.frame(numStillAlive(fpre1840))
return(list)
#function that calculates the number of people still alive
numStillAlive <- function(subset1) {
totalStartAlive <- sum(subset1)
for (i in row(subset1)){
sumDead <- sum(subset1[1:i,1])
stillAlive <- totalStartAlive - sumDead
listStillAlive <- c(listStillAlive,stillAlive)
}
return(listStillAlive)
}
return(listStillAlive)
listStillAlive <- c(listStillAlive,stillAlive)
stillAlive <- totalStartAlive - sumDead
fpre1840
View(demographyData)
fpre1840 <- subset(demographyData, select = "Age Class", "Pre-1840 Female")
??subset
fpre1840 <- subset(demographyData, select = c("Age Class", "Pre-1840 Female")
fpre1840
fpre1840 <- subset(demographyData, select = c("Age Class", "Pre-1840 Female"))
mpre1840 <- subset(demographyData, select = "Pre-1840 Male") subset()
fpre1840
fpre1840
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
if (!require("UsingR")) install.packages("UsingR"); library(UsingR)
library(ggplot2)
datasets::iris
head(iris)
tail(iris)
summary(iris)
setosa <- subset(iris,Species == "setosa")
versicolor <- subset(iris,Species == "versicolor")
virginica <- subset(iris,Species == "virginica")
simple.eda(iris$Sepal.Length)
simple.eda(iris$Petal.Length)
ggplot(iris) +
aes(x=factor(Species)) +
geom_bar() +
theme_classic() +
xlab ("species")
table(iris$Species)
shapiro.test(iris$Sepal.Length)
shapiro.test(iris$Petal.Length)
simple.eda(log10(iris$Sepal.Length))
simple.eda(log10(iris$Petal.Length))
shapiro.test(log10(iris$Sepal.Length))
shapiro.test(log10(iris$Petal.Length))
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE)+
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species")
wilcox.test(setosa$Petal.Length, setosa$Sepal.Length)
wilcox.test(versicolor$Petal.Length, versicolor$Sepal.Length)
wilcox.test(virginica$Petal.Length, virginica$Sepal.Length)
#first need to install vegan
#load vegan
library(vegan)
#Using a preloaded dataset BCI
data("BCI")
#look at BCI dataset
BCI
#investigate this dataset
ncol(BCI)
colnames(BCI)
nrow(BCI)
rownames(BCI)
#Two different ways to get shannon-diversity index for each site
diversity(BCI)
#This second method is more complex, but allows us to choose other possible indices to use instead of Shannon. Here we are going to assign our calculation to a new dataset labelled diversity_dataset
diversity_dataset <- diversity(BCI, index= "shannon", MARGIN = 1, base = exp(1))
diversity_dataset
#checking the normality of this data
qqnorm(diversity_dataset)
qqline(diversity_dataset)
#using a histogram to look at data
hist(diversity_dataset)
#investigate diversity_dataset
plot(diversity_dataset)
summary(diversity_dataset)
#getting the median diversity
median(diversity_dataset)
#getting the average diversity
mean(diversity_dataset)
#Creating a species accumulation curve. Species accumulation curves allow us to visualize how many species are present for a certain number of sites. Among other functions, it allows us to determine if species count is increasing with sampling effort (number of sites).
species_accumulation <- specaccum(BCI)
#Plotting a basic species accumulation curve
plot(species_accumulation)
#We can edit this graph to better visualize the data, and to be generally more visually appealing
#Aesthetics include:
#ci.type = bar, line, or polygon; Type of confidence interval drawn on the figure.
#col=""; color of species accumulation line
#lwd= ; width of line
#ci.lty= 0,1,2,3... ; Type of border on confidence polygon or confidence lines
#ci.col=""; color for confidence line or polygon
#ylab= "" ; this allows us to edit the label on the y axis
plot(species_accumulation, ci.type="poly", col="blue", lwd=3, ci.lty=0, ci.col="orange", ylab ="Species Accumulation")
## Load survival package
library(survival)
## List datasets in survival package
data(package = "survival")
## Load lung data
data(lung)
## Show first 6 rows
head(lung)
## Add survival object
lung$SurvObj <- with(lung, Surv(time, status == 2))
## Check data
head(lung)
## Kaplan-Meier estimator. The "log-log" confidence interval is preferred.
km.as.one <- survfit(SurvObj ~ 1, data = lung, conf.type = "log-log")
km.by.sex <- survfit(SurvObj ~ sex, data = lung, conf.type = "log-log")
## Show object
km.as.one
survfit(formula = SurvObj ~ 1, data = lung, conf.type = "log-log")
km.by.sex
survfit(formula = SurvObj ~ sex, data = lung, conf.type = "log-log")
## See survival estimates at given time (lots of outputs)
## summary(km.as.one)
## summary(km.by.sex)
## Plotting without any specification
plot(km.as.one)
plot(km.by.sex)
## Load rms package
library(rms)
for (i in row(subset1)){
sumDead <- sum(subset1[1:i,1])
stillAlive <- totalStartAlive - sumDead
listStillAlive <- c(listStillAlive,stillAlive)
}
#function that calculates the number of people still alive
numStillAlive <- function(subset1) {
totalStartAlive <- sum(subset1)
for (i in row(subset1)){
sumDead <- sum(subset1[1:i,1])
stillAlive <- totalStartAlive - sumDead
listStillAlive <- c(listStillAlive,stillAlive)
}
return(listStillAlive)
}
totalStartAlive <- sum(subset1)
numStillAlive <- function(subset1) {
totalStartAlive <- sum(subset1)
for (i in row(subset1)){
sumDead <- sum(subset1[1:i,1])
stillAlive <- totalStartAlive - sumDead
listStillAlive <- c(listStillAlive,stillAlive)
}
return(listStillAlive)
fpre1840alive <- as.data.frame(numStillAlive(fpre1840))
fpre1840alive <- as.data.frame(numStillAlive(fpre1840))
fpre1840alive
l
fpre1840alive
fpre1840alive <- as.data.frame(numStillAlive(fpre1840))
fpre1840alive <- as.data.frame(numStillAlive(fpre1840))
fpre1840alive
fpre1840alive <- as.data.frame(numStillAlive(fpre1840[2]))
fpre1840alive
fpre1840prop <- proportionAlive(fpre1840alive)
fpre1840$PropAlive <- fpre1840prop[2:21]
fpre1840$xAxis <- 1:20
mpre1840alive <- as.data.frame(numStillAlive(mpre1840))
mpre1840prop <- proportionAlive(mpre1840alive)
mpre1840$PropAlive <- mpre1840prop[2:21]
mpre1840$xAxis <- ("0-5" "6-10" "11-15" "16-20" "21-25" "26-30" "31-35" "36-40" "41-45" "46-50" "51-55" "56-60" "61-65" "66-70" "71-75""76-80" "81-85" "86-90" "91-95" "96+")
fpre1840alive <- as.data.frame(numStillAlive(fpre1840[2]))
listStillAlive <- c(listStillAlive,stillAlive)
datasets::iris
head(iris)
??summary
summary(mtcars)
library(ggplot2)
datasets::iris
head(iris)
tail(iris)
summary(iris)
ggplot(iris) +
aes(x=factor(Species), fill=Species) +
geom_bar() +
theme_classic() +
xlab ("species")
ggplot(iris) +
aes(x=factor(Species), fill=Species) +
geom_bar() +
theme_classic() +
xlab ("Species") +
ylab("Count") +
theme(legend.position = "false")
ggplot(iris) +
aes(x=factor(Species), fill=Species) +
geom_bar() +
theme_classic() +
xlab ("Species of Iris") +
ylab("Count") +
theme(legend.position = "false")
table(iris$Species)
table(iris$Species)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE)+
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species")
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE)+
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris")
wilcox.test(setosa$Petal.Length, setosa$Sepal.Length)
wilcox.test(setosa$Petal.Length, setosa$Sepal.Length)
#first need to install vegan
#load vegan
library(vegan)
#Using a preloaded dataset BCI
data("BCI")
#look at BCI dataset
BCI
#investigate this dataset
ncol(BCI)
colnames(BCI)
nrow(BCI)
rownames(BCI)
#Two different ways to get shannon-diversity index for each site
diversity(BCI)
#This second method is more complex, but allows us to choose other possible indices to use instead of Shannon. Here we are going to assign our calculation to a new dataset labelled diversity_dataset
diversity_dataset <- diversity(BCI, index= "shannon", MARGIN = 1, base = exp(1))
diversity_dataset
#checking the normality of this data
qqnorm(diversity_dataset)
qqline(diversity_dataset)
#using a histogram to look at data
hist(diversity_dataset)
#investigate diversity_dataset
plot(diversity_dataset)
summary(diversity_dataset)
#getting the median diversity
median(diversity_dataset)
#getting the average diversity
mean(diversity_dataset)
#Creating a species accumulation curve. Species accumulation curves allow us to visualize how many species are present for a certain number of sites. Among other functions, it allows us to determine if species count is increasing with sampling effort (number of sites).
species_accumulation <- specaccum(BCI)
#Plotting a basic species accumulation curve
plot(species_accumulation)
#We can edit this graph to better visualize the data, and to be more visually appealing
#Aesthetics include:
#ci.type = bar, line, or polygon; Type of confidence interval drawn on the figure.
#col=""; color of species accumulation line
#lwd= ; width of line
#ci.lty= 0,1,2,3... ; Type of border on confidence polygon or confidence lines
#ci.col=""; color for confidence line or polygon
#ylab= "" ; this allows us to edit the label on the y axis
plot(species_accumulation, ci.type="poly", col="blue", lwd=3, ci.lty=0, ci.col="orange", ylab ="Species Accumulation")
#Using a preloaded dataset BCI
data("BCI")
#look at BCI dataset
BCI
#Using a preloaded dataset BCI
data("BCI")
#Using a preloaded dataset BCI
data("BCI")
#look at BCI dataset
BCI
??BCI
View(demographyData)
ggplot(mpre1840) +
aes(x = as.numeric(xAxis), y = as.numeric(PropAlive)) +
geom_line() +
theme_cowplot() +
xlab("Age Class") +
ylab("Survivorship")
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE)+
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris")
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris")
# Load the lung data
data(lung
ggplot(iris) +
ggplot(iris) +
aes(x=factor(Species), fill=Species) +
geom_bar() +
theme_classic() +
xlab ("Species of Iris") +
ylab("Count") +
theme(legend.position = "false")
ggplot(iris) +
aes(x=factor(Species), fill=Species) +
geom_bar() +
theme_classic() +
xlab ("Species of Iris") +
ylab("Count") +
theme(legend.position = "false") +
scale_fill_hue(l=40, c=35)
ggplot(iris) +
aes(x=factor(Species), fill=Species) +
geom_bar() +
theme_classic() +
xlab ("Species of Iris") +
ylab("Count") +
theme(legend.position = "false") +
scale_fill_hue(l = 70, c = 150)
ggplot(iris) +
aes(x=factor(Species), fill=Species) +
geom_bar() +
theme_classic() +
xlab ("Species of Iris") +
ylab("Count") +
theme(legend.position = "false") +
scale_fill_hue(c = 50, l = 70, h=c(90, -30))
scale_fill_hue(c = 50, l = 70, h=c(90, -30)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(c = 50, l = 70, h=c(90, -30))
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(c = 25, l = 70, h=c(90, -30))
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(l = 70, c = 150)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(l = 80, c = 150)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(l = 100, c = 150)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(l = 90, c = 110)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(l = 90, c = 50)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(l = 90, c = 250)
ggplot(iris, aes(x=Sepal.Length, y =Petal.Length))+
geom_point(aes(colour = factor(Species)), shape =1, size=3)+
theme_classic() +
geom_smooth(method=lm, color="blue", se=TRUE) +
xlab("Sepal Length")+
ylab("Petal Length")+
ylim(0,8)+
labs(color = "Species of Iris") +
scale_color_hue(l = 90, c = 200)
